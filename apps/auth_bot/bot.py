import re
from dataclasses import dataclass
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

import toml
from internal.users import user
from pkg.log import logger
from telegram.bot import Bot
from telegram.ext import CommandHandler
from telegram.ext.callbackcontext import CallbackContext
from telegram.ext.dispatcher import Dispatcher
from telegram.update import Update

cfg = toml.load("cfg.toml")
tz_info = cfg.get("timezone").get("tz_info")

tz = ZoneInfo(tz_info)
url = "https://vagu.space"

response_message = "–≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å üòä\n\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É - ¬´–≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É¬ª" # noqa


@dataclass
class Auth_bot:
    logger: logger.Logger
    bot: Bot
    dispatcher: Dispatcher
    user_storage: user.Storage

    def start(self, update: Update, context: CallbackContext):
        """–•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ—Ç–æ–º –∫–æ–º–∞–Ω–¥—ã /start

        :param update:
            –í—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ telegram
            :type update: telegram.update.Update
        :param context:
            –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞
            :type context: telegram.ext.callbackcontext.CallbackContext
        """
        print(context.args)
        user_firstname = update.message.chat.first_name
        if context.args == []:
            context.bot.send_message(update.effective_chat.id,
                                     text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –î–ª—è –Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ \
                                          –Ω–∞—á–Ω–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç–µ")
        else:
            site_code = context.args[0]
            try:
                username = update.message.chat.username
            except KeyError:
                username = ''

            """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–ª—é—á–∞ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É MD5"""
            if re.findall(r"([a-fA-F\d]{32})", site_code) == []:
                context.bot.send_message(update.effective_chat.id,
                                         text=user_firstname + ", –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ —Å–∞–π—Ç.") # noqa
                self.logger.info(f"–ö–æ–¥ {context.args[0]} –Ω–µ –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é") # noqa 
            else:
                created_at = datetime.now(tz)
                # print(created_at)
                tel_user = user.User(id=0,
                                     username=username,
                                     telegram_id=update.message.chat.id,
                                     auth_code=site_code,
                                     created_at=created_at,
                                     valid_to=created_at + timedelta(hours=1))

                if not self.user_storage.create(tel_user):
                    self.user_storage.update_auth_key(tel_user)
                    self.logger.info(f"–û–±–Ω–æ–≤–ª—ë–Ω –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥ id {tel_user.telegram_id}") # noqa

                context.bot.send_message(update.effective_chat.id,
                                         text=f"{user_firstname}, {response_message}") # noqa

    def create_hanlders(self):
        """–ú–µ—Ç–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –±–æ—Ç–∞"""

        start_handler = CommandHandler("start", self.start)
        self.dispatcher.add_handler(start_handler)


def new(logger: logger.Logger,
        bot_token: str,
        user_storage: user.Storage) -> Auth_bot:
    """–ú–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞ –±–æ—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

    :param logger:
        –õ–æ–≥–≥–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞
        :type logger: logging.Logger
    :param bot_token:
        –¢–æ–∫–µ–Ω –±–æ—Ç–∞
        :type bot_token: str
    :param user_storage:
        –•—Ä–∞–Ω–∏–ª–∏—â–µ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        :type user_storage: user.Storage
    :return: –û–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞
    :rtype: Auth_bot
    """
    bot = Bot(bot_token)
    return Auth_bot(logger=logger,
                    bot=bot,
                    dispatcher=Dispatcher(bot, None, 1),
                    user_storage=user_storage)
